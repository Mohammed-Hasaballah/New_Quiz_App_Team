{
    "sourceFile": "lib/pages/true_false_q_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 58,
            "patches": [
                {
                    "date": 1687439050010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687525208430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,10 @@\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n \r\n class TrueFalseQuiz extends StatefulWidget {\r\n+  const TrueFalseQuiz({super.key});\r\n+\r\n   @override\r\n   _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n }\r\n \r\n@@ -25,16 +27,16 @@\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n-          Icon(\r\n+          const Icon(\r\n             Icons.check,\r\n             color: Colors.green,\r\n           ),\r\n         );\r\n       } else {\r\n         scoreKeeper.add(\r\n-          Icon(\r\n+          const Icon(\r\n             Icons.close,\r\n             color: Colors.red,\r\n           ),\r\n         );\r\n@@ -43,9 +45,9 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n \r\n-      Timer(Duration(seconds: 1), () {\r\n+      Timer(const Duration(seconds: 1), () {\r\n         // Alert(context: context, title: \"Finished\", desc: \"you are done\").show();\r\n         setState(() {\r\n           quizBrain.reset();\r\n           scoreKeeper.clear();\r\n@@ -57,18 +59,17 @@\n   }\r\n \r\n   @override\r\n   void initState() {\r\n-    Timer.periodic(Duration(seconds: 1), (timer) {\r\n+    Timer.periodic(const Duration(seconds: 1), (timer) {\r\n       setState(() {\r\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n         // timer.cancel();\r\n         counter = 10;\r\n         quizBrain.nextQuestion();\r\n       }\r\n-      ;\r\n     });\r\n     super.initState();\r\n   }\r\n \r\n@@ -80,9 +81,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       body: Container(\r\n-        decoration: BoxDecoration(\r\n+        decoration: const BoxDecoration(\r\n           gradient: LinearGradient(\r\n             colors: [\r\n               kBlueBg,\r\n               kL2,\r\n@@ -113,9 +114,9 @@\n \r\n                         Navigator.pushAndRemoveUntil(\r\n                           context,\r\n                           MaterialPageRoute(\r\n-                            builder: (context) => HomePage(),\r\n+                            builder: (context) => const HomePage(),\r\n                           ),\r\n                           (route) => false,\r\n                         );\r\n                       },\r\n@@ -134,9 +135,9 @@\n                         ),\r\n                       ),\r\n                       Text(\r\n                         counter.toString(),\r\n-                        style: TextStyle(\r\n+                        style: const TextStyle(\r\n                           fontFamily: 'Sf-Pro-Text',\r\n                           fontSize: 24,\r\n                           color: Colors.white,\r\n                           fontWeight: FontWeight.bold,\r\n@@ -145,29 +146,29 @@\n                     ],\r\n                   ),\r\n                   OutlinedButton(\r\n                     onPressed: () {},\r\n+                    style: OutlinedButton.styleFrom(\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(25),\r\n+                        ),\r\n+                        side: const BorderSide(color: Colors.white)),\r\n                     child: Icon(\r\n                       Icons.favorite,\r\n                       color: Colors.white,\r\n                     ),\r\n-                    style: OutlinedButton.styleFrom(\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(25),\r\n-                        ),\r\n-                        side: BorderSide(color: Colors.white)),\r\n                   )\r\n                 ],\r\n               ),\r\n               Expanded(\r\n                 flex: 5,\r\n                 child: Padding(\r\n-                  padding: EdgeInsets.all(10.0),\r\n+                  padding: const EdgeInsets.all(10.0),\r\n                   child: Center(\r\n                     child: Text(\r\n                       quizBrain.getQuestionText(),\r\n                       textAlign: TextAlign.center,\r\n-                      style: TextStyle(\r\n+                      style: const TextStyle(\r\n                         fontSize: 25.0,\r\n                         color: Colors.white,\r\n                       ),\r\n                     ),\r\n@@ -175,14 +176,14 @@\n                 ),\r\n               ),\r\n               Expanded(\r\n                 child: Padding(\r\n-                  padding: EdgeInsets.all(15.0),\r\n+                  padding: const EdgeInsets.all(15.0),\r\n                   child: ElevatedButton(\r\n-                    style: ButtonStyle(\r\n+                    style: const ButtonStyle(\r\n                       backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n                     ),\r\n-                    child: Text(\r\n+                    child: const Text(\r\n                       'True',\r\n                       style: TextStyle(\r\n                         color: Colors.white,\r\n                         fontSize: 20.0,\r\n@@ -196,14 +197,14 @@\n                 ),\r\n               ),\r\n               Expanded(\r\n                 child: Padding(\r\n-                  padding: EdgeInsets.all(15.0),\r\n+                  padding: const EdgeInsets.all(15.0),\r\n                   child: ElevatedButton(\r\n-                    style: ButtonStyle().copyWith(\r\n+                    style: const ButtonStyle().copyWith(\r\n                       backgroundColor: MaterialStatePropertyAll(Colors.red),\r\n                     ),\r\n-                    child: Text(\r\n+                    child: const Text(\r\n                       'False',\r\n                       style: TextStyle(\r\n                         fontSize: 20.0,\r\n                         color: Colors.white,\r\n@@ -218,9 +219,9 @@\n               ),\r\n               Wrap(\r\n                 children: scoreKeeper,\r\n               ),\r\n-              SizedBox(\r\n+              const SizedBox(\r\n                 height: 72,\r\n               )\r\n             ],\r\n           ),\r\n"
                },
                {
                    "date": 1687525214961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,9 @@\n                         shape: RoundedRectangleBorder(\r\n                           borderRadius: BorderRadius.circular(25),\r\n                         ),\r\n                         side: const BorderSide(color: Colors.white)),\r\n-                    child: Icon(\r\n+                    child: const Icon(\r\n                       Icons.favorite,\r\n                       color: Colors.white,\r\n                     ),\r\n                   )\r\n@@ -200,9 +200,10 @@\n                 child: Padding(\r\n                   padding: const EdgeInsets.all(15.0),\r\n                   child: ElevatedButton(\r\n                     style: const ButtonStyle().copyWith(\r\n-                      backgroundColor: MaterialStatePropertyAll(Colors.red),\r\n+                      backgroundColor:\r\n+                          const MaterialStatePropertyAll(Colors.red),\r\n                     ),\r\n                     child: const Text(\r\n                       'False',\r\n                       style: TextStyle(\r\n"
                },
                {
                    "date": 1687525227947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n import 'dart:async';\r\n-\r\n import 'package:flutter/material.dart';\r\n-\r\n import '../constants.dart';\r\n import '../modules/true_false/quizBrain.dart';\r\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n"
                },
                {
                    "date": 1687525252944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// ignore_for_file: avoid_print\r\n+\r\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n import '../constants.dart';\r\n import '../modules/true_false/quizBrain.dart';\r\n"
                },
                {
                    "date": 1687623701421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,230 @@\n+// ignore_for_file: avoid_print\r\n+\r\n+import 'dart:async';\r\n+import 'package:flutter/material.dart';\r\n+import '../constants.dart';\r\n+import '../modules/true_false/quizBrain.dart';\r\n+import '../widgets/my_outline_btn.dart';\r\n+import 'home.dart';\r\n+\r\n+class TrueFalseQuiz extends StatefulWidget {\r\n+  const TrueFalseQuiz({super.key});\r\n+\r\n+  @override\r\n+  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n+}\r\n+\r\n+class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n+  QuizBrain quizBrain = QuizBrain();\r\n+  List<Icon> scoreKeeper = [];\r\n+  int? _choice;\r\n+  int counter = 10;\r\n+\r\n+  void checkAnswer(bool userChoice) {\r\n+    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n+    setState(() {\r\n+      if (correctAnswer == userChoice) {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.check,\r\n+            color: Colors.green,\r\n+          ),\r\n+        );\r\n+      } else {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.close,\r\n+            color: Colors.red,\r\n+          ),\r\n+        );\r\n+      }\r\n+    });\r\n+\r\n+    if (quizBrain.isFinished()) {\r\n+      print('finished');\r\n+\r\n+      Timer(const Duration(seconds: 1), () {\r\n+        // Alert(context: context, title: \"Finished\", desc: \"you are done\").show();\r\n+        setState(() {\r\n+          quizBrain.reset();\r\n+          scoreKeeper.clear();\r\n+        });\r\n+      });\r\n+    } else {\r\n+      quizBrain.nextQuestion();\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    Timer.periodic(const Duration(seconds: 1), (timer) {\r\n+      setState(() {\r\n+        counter--;\r\n+      });\r\n+      if (counter == 0) {\r\n+        // timer.cancel();\r\n+        counter = 10;\r\n+        quizBrain.nextQuestion();\r\n+      }\r\n+    });\r\n+    super.initState();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      body: Container(\r\n+        decoration: const BoxDecoration(\r\n+          gradient: LinearGradient(\r\n+            colors: [\r\n+              kBlueBg,\r\n+              kL2,\r\n+            ],\r\n+            begin: Alignment.topCenter,\r\n+            end: Alignment.bottomCenter,\r\n+          ),\r\n+        ),\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+            children: <Widget>[\r\n+              Row(\r\n+                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                children: [\r\n+                  SizedBox(\r\n+                    height: 44,\r\n+                    width: 44,\r\n+                    child: MYOutlineBtn(\r\n+                      icon: Icons.close,\r\n+                      iconColor: Colors.white,\r\n+                      bColor: Colors.white,\r\n+                      function: () {\r\n+                        // Navigator.pop(context);\r\n+                        // Navigator.pop(context);\r\n+\r\n+                        Navigator.pushAndRemoveUntil(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (context) => const HomePage(),\r\n+                          ),\r\n+                          (route) => false,\r\n+                        );\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                  Stack(\r\n+                    alignment: Alignment.center,\r\n+                    children: [\r\n+                      SizedBox(\r\n+                        height: 56,\r\n+                        width: 56,\r\n+                        child: CircularProgressIndicator(\r\n+                          value: counter / 10,\r\n+                          color: Colors.white,\r\n+                          backgroundColor: Colors.white12,\r\n+                        ),\r\n+                      ),\r\n+                      Text(\r\n+                        counter.toString(),\r\n+                        style: const TextStyle(\r\n+                          fontFamily: 'Sf-Pro-Text',\r\n+                          fontSize: 24,\r\n+                          color: Colors.white,\r\n+                          fontWeight: FontWeight.bold,\r\n+                        ),\r\n+                      )\r\n+                    ],\r\n+                  ),\r\n+                  OutlinedButton(\r\n+                    onPressed: () {},\r\n+                    style: OutlinedButton.styleFrom(\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(25),\r\n+                        ),\r\n+                        side: const BorderSide(color: Colors.white)),\r\n+                    child: const Icon(\r\n+                      Icons.favorite,\r\n+                      color: Colors.white,\r\n+                    ),\r\n+                  )\r\n+                ],\r\n+              ),\r\n+              Expanded(\r\n+                flex: 5,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(10.0),\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      quizBrain.getQuestionText(),\r\n+                      textAlign: TextAlign.center,\r\n+                      style: const TextStyle(\r\n+                        fontSize: 25.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle(\r\n+                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'True',\r\n+                      style: TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontSize: 20.0,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked true.\r\n+                      checkAnswer(true);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle().copyWith(\r\n+                      backgroundColor:\r\n+                          const MaterialStatePropertyAll(Colors.red),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'False',\r\n+                      style: TextStyle(\r\n+                        fontSize: 20.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked false.\r\n+                      checkAnswer(false);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Wrap(\r\n+                children: scoreKeeper,\r\n+              ),\r\n+              const SizedBox(\r\n+                height: 72,\r\n+              )\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1687623794689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,242 +43,32 @@\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n \r\n       Timer(const Duration(seconds: 1), () {\r\n-        // Alert(context: context, title: \"Finished\", desc: \"you are done\").show();\r\n-        setState(() {\r\n-          quizBrain.reset();\r\n-          scoreKeeper.clear();\r\n-        });\r\n-      });\r\n-    } else {\r\n-      quizBrain.nextQuestion();\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    Timer.periodic(const Duration(seconds: 1), (timer) {\r\n-      setState(() {\r\n-        counter--;\r\n-      });\r\n-      if (counter == 0) {\r\n-        // timer.cancel();\r\n-        counter = 10;\r\n-        quizBrain.nextQuestion();\r\n-      }\r\n-    });\r\n-    super.initState();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      body: Container(\r\n-        decoration: const BoxDecoration(\r\n-          gradient: LinearGradient(\r\n-            colors: [\r\n-              kBlueBg,\r\n-              kL2,\r\n-            ],\r\n-            begin: Alignment.topCenter,\r\n-            end: Alignment.bottomCenter,\r\n-          ),\r\n-        ),\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n-          child: Column(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-            children: <Widget>[\r\n-              Row(\r\n-                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                children: [\r\n-                  SizedBox(\r\n-                    height: 44,\r\n-                    width: 44,\r\n-                    child: MYOutlineBtn(\r\n-                      icon: Icons.close,\r\n-                      iconColor: Colors.white,\r\n-                      bColor: Colors.white,\r\n-                      function: () {\r\n-                        // Navigator.pop(context);\r\n-                        // Navigator.pop(context);\r\n-\r\n-                        Navigator.pushAndRemoveUntil(\r\n-                          context,\r\n-                          MaterialPageRoute(\r\n-                            builder: (context) => const HomePage(),\r\n-                          ),\r\n-                          (route) => false,\r\n-                        );\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n-                  Stack(\r\n-                    alignment: Alignment.center,\r\n-                    children: [\r\n-                      SizedBox(\r\n-                        height: 56,\r\n-                        width: 56,\r\n-                        child: CircularProgressIndicator(\r\n-                          value: counter / 10,\r\n-                          color: Colors.white,\r\n-                          backgroundColor: Colors.white12,\r\n-                        ),\r\n-                      ),\r\n-                      Text(\r\n-                        counter.toString(),\r\n-                        style: const TextStyle(\r\n-                          fontFamily: 'Sf-Pro-Text',\r\n-                          fontSize: 24,\r\n-                          color: Colors.white,\r\n-                          fontWeight: FontWeight.bold,\r\n-                        ),\r\n-                      )\r\n-                    ],\r\n-                  ),\r\n-                  OutlinedButton(\r\n-                    onPressed: () {},\r\n-                    style: OutlinedButton.styleFrom(\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(25),\r\n-                        ),\r\n-                        side: const BorderSide(color: Colors.white)),\r\n-                    child: const Icon(\r\n-                      Icons.favorite,\r\n-                      color: Colors.white,\r\n-                    ),\r\n-                  )\r\n-                ],\r\n+       showDialog(\r\n+          context: context,\r\n+          builder: (BuildContext context) {\r\n+            return AlertDialog(\r\n+              title: const Text('Quiz Finished'),\r\n+              content: const Text(\r\n+                'Congratulations! You have completed the quiz.',\r\n+                style: TextStyle(color: Colors.black),\r\n               ),\r\n-              Expanded(\r\n-                flex: 5,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(10.0),\r\n-                  child: Center(\r\n-                    child: Text(\r\n-                      quizBrain.getQuestionText(),\r\n-                      textAlign: TextAlign.center,\r\n-                      style: const TextStyle(\r\n-                        fontSize: 25.0,\r\n-                        color: Colors.white,\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n+              actions: [\r\n+                TextButton(\r\n+                  onPressed: () {\r\n+                    Navigator.of(context).pop();\r\n+                    setState(() {\r\n+                      quizBrain.reset();\r\n+                      scoreKeeper.clear();\r\n+                    });\r\n+                  },\r\n+                  child: const Text('Close'),\r\n                 ),\r\n-              ),\r\n-              Expanded(\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(15.0),\r\n-                  child: ElevatedButton(\r\n-                    style: const ButtonStyle(\r\n-                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n-                    ),\r\n-                    child: const Text(\r\n-                      'True',\r\n-                      style: TextStyle(\r\n-                        color: Colors.white,\r\n-                        fontSize: 20.0,\r\n-                      ),\r\n-                    ),\r\n-                    onPressed: () {\r\n-                      //The user picked true.\r\n-                      checkAnswer(true);\r\n-                    },\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              Expanded(\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(15.0),\r\n-                  child: ElevatedButton(\r\n-                    style: const ButtonStyle().copyWith(\r\n-                      backgroundColor:\r\n-                          const MaterialStatePropertyAll(Colors.red),\r\n-                    ),\r\n-                    child: const Text(\r\n-                      'False',\r\n-                      style: TextStyle(\r\n-                        fontSize: 20.0,\r\n-                        color: Colors.white,\r\n-                      ),\r\n-                    ),\r\n-                    onPressed: () {\r\n-                      //The user picked false.\r\n-                      checkAnswer(false);\r\n-                    },\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              Wrap(\r\n-                children: scoreKeeper,\r\n-              ),\r\n-              const SizedBox(\r\n-                height: 72,\r\n-              )\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-// ignore_for_file: avoid_print\r\n-\r\n-import 'dart:async';\r\n-import 'package:flutter/material.dart';\r\n-import '../constants.dart';\r\n-import '../modules/true_false/quizBrain.dart';\r\n-import '../widgets/my_outline_btn.dart';\r\n-import 'home.dart';\r\n-\r\n-class TrueFalseQuiz extends StatefulWidget {\r\n-  const TrueFalseQuiz({super.key});\r\n-\r\n-  @override\r\n-  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n-}\r\n-\r\n-class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n-  QuizBrain quizBrain = QuizBrain();\r\n-\r\n-  List<Icon> scoreKeeper = [];\r\n-\r\n-  int? _choice;\r\n-\r\n-  int counter = 10;\r\n-\r\n-  void checkAnswer(bool userChoice) {\r\n-    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-    setState(() {\r\n-      if (correctAnswer == userChoice) {\r\n-        scoreKeeper.add(\r\n-          const Icon(\r\n-            Icons.check,\r\n-            color: Colors.green,\r\n-          ),\r\n+              ],\r\n+            );\r\n+          },\r\n         );\r\n-      } else {\r\n-        scoreKeeper.add(\r\n-          const Icon(\r\n-            Icons.close,\r\n-            color: Colors.red,\r\n-          ),\r\n-        );\r\n-      }\r\n-    });\r\n-\r\n-    if (quizBrain.isFinished()) {\r\n-      print('finished');\r\n-\r\n-      Timer(const Duration(seconds: 1), () {\r\n-        // Alert(context: context, title: \"Finished\", desc: \"you are done\").show();\r\n         setState(() {\r\n           quizBrain.reset();\r\n           scoreKeeper.clear();\r\n         });\r\n"
                },
                {
                    "date": 1687623897661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n \r\n       Timer(const Duration(seconds: 1), () {\r\n-       showDialog(\r\n+        showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n@@ -55,9 +55,15 @@\n               ),\r\n               actions: [\r\n                 TextButton(\r\n                   onPressed: () {\r\n-                    Navigator.of(context).pop();\r\n+                     Navigator.pushAndRemoveUntil(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (context) => const HomePage(),\r\n+                          ),\r\n+                          (route) => false,\r\n+                        );\r\n                     setState(() {\r\n                       quizBrain.reset();\r\n                       scoreKeeper.clear();\r\n                     });\r\n"
                },
                {
                    "date": 1687623953517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n     });\r\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n+      timer.cancel();\r\n \r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n@@ -55,15 +56,15 @@\n               ),\r\n               actions: [\r\n                 TextButton(\r\n                   onPressed: () {\r\n-                     Navigator.pushAndRemoveUntil(\r\n-                          context,\r\n-                          MaterialPageRoute(\r\n-                            builder: (context) => const HomePage(),\r\n-                          ),\r\n-                          (route) => false,\r\n-                        );\r\n+                    Navigator.pushAndRemoveUntil(\r\n+                      context,\r\n+                      MaterialPageRoute(\r\n+                        builder: (context) => const HomePage(),\r\n+                      ),\r\n+                      (route) => false,\r\n+                    );\r\n                     setState(() {\r\n                       quizBrain.reset();\r\n                       scoreKeeper.clear();\r\n                     });\r\n"
                },
                {
                    "date": 1687624052430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n   QuizBrain quizBrain = QuizBrain();\r\n   List<Icon> scoreKeeper = [];\r\n   int? _choice;\r\n   int counter = 10;\r\n+  Timer time\r\n \r\n   void checkAnswer(bool userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n     setState(() {\r\n@@ -41,9 +42,9 @@\n     });\r\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n-      timer.cancel();\r\n+      \r\n \r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n"
                },
                {
                    "date": 1687624060777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   QuizBrain quizBrain = QuizBrain();\r\n   List<Icon> scoreKeeper = [];\r\n   int? _choice;\r\n   int counter = 10;\r\n-  Timer time\r\n+  late Timer timer;\r\n \r\n   void checkAnswer(bool userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n     setState(() {\r\n@@ -42,9 +42,8 @@\n     });\r\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n-      \r\n \r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n"
                },
                {
                    "date": 1687624072135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n   List<Icon> scoreKeeper = [];\r\n-  int? _choice;\r\n+\r\n   int counter = 10;\r\n   late Timer timer;\r\n \r\n   void checkAnswer(bool userChoice) {\r\n@@ -86,9 +86,9 @@\n   }\r\n \r\n   @override\r\n   void initState() {\r\n-    Timer.periodic(const Duration(seconds: 1), (timer) {\r\n+    timer = Timer.periodic(const Duration(seconds: 1), (timer) {\r\n       setState(() {\r\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n"
                },
                {
                    "date": 1687624088197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     });\r\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n-\r\n+      timer\r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687624137223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,10 @@\n     });\r\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n-      timer\r\n+      timer.cancel();\r\n+      \r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687624150194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-      \r\n+\r\n       Timer(const Duration(seconds: 1), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n@@ -136,10 +136,8 @@\n                       icon: Icons.close,\r\n                       iconColor: Colors.white,\r\n                       bColor: Colors.white,\r\n                       function: () {\r\n-                        // Navigator.pop(context);\r\n-                        // Navigator.pop(context);\r\n \r\n                         Navigator.pushAndRemoveUntil(\r\n                           context,\r\n                           MaterialPageRoute(\r\n"
                },
                {
                    "date": 1687624216150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n       setState(() {\r\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n-        // timer.cancel();\r\n         counter = 10;\r\n         quizBrain.nextQuestion();\r\n       }\r\n     });\r\n"
                },
                {
                    "date": 1687624559168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n         counter = 10;\r\n-        quizBrain.nextQuestion();\r\n+        \r\n       }\r\n     });\r\n     super.initState();\r\n   }\r\n"
                },
                {
                    "date": 1687624714781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n       setState(() {\r\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n+        // quizBrain.nextQuestion();\r\n         counter = 10;\r\n-        \r\n       }\r\n     });\r\n     super.initState();\r\n   }\r\n@@ -135,9 +135,8 @@\n                       icon: Icons.close,\r\n                       iconColor: Colors.white,\r\n                       bColor: Colors.white,\r\n                       function: () {\r\n-\r\n                         Navigator.pushAndRemoveUntil(\r\n                           context,\r\n                           MaterialPageRoute(\r\n                             builder: (context) => const HomePage(),\r\n"
                },
                {
                    "date": 1687624720809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,9 @@\n         counter--;\r\n       });\r\n       if (counter == 0) {\r\n         // quizBrain.nextQuestion();\r\n+        checkAnswer(null);\r\n         counter = 10;\r\n       }\r\n     });\r\n     super.initState();\r\n"
                },
                {
                    "date": 1687624740785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \r\n   int counter = 10;\r\n   late Timer timer;\r\n \r\n-  void checkAnswer(bool userChoice) {\r\n+  void checkAnswer(bool? userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n"
                },
                {
                    "date": 1687624894058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: const Text(\r\n-                'Congratulations! You have completed the quiz.',\r\n+                'Congratulations! You have completed the quiz.\\n',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624902383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: const Text(\r\n-                'Congratulations! You have completed the quiz.\\n',\r\n+                'Congratulations! You have completed the quiz.\\nresult:',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624908320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: const Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult:',\r\n+                'Congratulations! You have completed the quiz.\\nresult: $scoreKeeper.l',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624913649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: const Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: $scoreKeeper.l',\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper}',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624922766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n           context: context,\r\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n-              content: const Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper}',\r\n+              content:   Text(\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length}',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624929845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content:   Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length}',\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624989248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n           context: context,\r\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n-              content:   Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ',\r\n+              content: Text(\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / {} ',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687624998087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / {} ',\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / {$quizBrain.} ',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687625013789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / {$quizBrain.} ',\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / $quizBrain} ',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687625020392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / $quizBrain} ',\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ${quizBrain.} ',\r\n                 style: TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687625057976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ${quizBrain.} ',\r\n-                style: TextStyle(color: Colors.black),\r\n+                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ${quizBrain.questionBank.length} ',\r\n+                style: const TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n                   onPressed: () {\r\n"
                },
                {
                    "date": 1687625065258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n   List<Icon> scoreKeeper = [];\r\n-\r\n+  int result = 0 ; \r\n   int counter = 10;\r\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n"
                },
                {
                    "date": 1687625075193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n             Icons.check,\r\n             color: Colors.green,\r\n           ),\r\n         );\r\n+        re\r\n       } else {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n             Icons.close,\r\n"
                },
                {
                    "date": 1687625090287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n   List<Icon> scoreKeeper = [];\r\n-  int result = 0 ; \r\n+  int result = 0;\r\n   int counter = 10;\r\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n@@ -30,9 +30,9 @@\n             Icons.check,\r\n             color: Colors.green,\r\n           ),\r\n         );\r\n-        re\r\n+        result++;\r\n       } else {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n             Icons.close,\r\n@@ -52,9 +52,9 @@\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n               title: const Text('Quiz Finished'),\r\n               content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: ${scoreKeeper.length} / ${quizBrain.questionBank.length} ',\r\n+                'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n                 style: const TextStyle(color: Colors.black),\r\n               ),\r\n               actions: [\r\n                 TextButton(\r\n"
                },
                {
                    "date": 1687625113276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n \r\n-      Timer(const Duration(seconds: 1), () {\r\n+      Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n             return AlertDialog(\r\n"
                },
                {
                    "date": 1687625248850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,14 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-\r\n+Alert(\r\n+                                  context: context,\r\n+                                  title: \"finished\",\r\n+                                  desc:\r\n+                                      \"the quize is finished\\nyour score $score/${quize.gitlingth()}\")\r\n+                              .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687625253903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // ignore_for_file: avoid_print\r\n \r\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n+import 'package:rflutter_alert/rflutter_alert.dart';\r\n import '../constants.dart';\r\n import '../modules/true_false/quizBrain.dart';\r\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n"
                },
                {
                    "date": 1687625259997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,14 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-Alert(\r\n-                                  context: context,\r\n-                                  title: \"finished\",\r\n-                                  desc:\r\n-                                      \"the quize is finished\\nyour score $score/${quize.gitlingth()}\")\r\n-                              .show();\r\n+      Alert(\r\n+              context: context,\r\n+              title: \"finished\",\r\n+              desc:\r\n+                  \"the quize is finished\\nyour score $score/${quize.gitlingth()}\")\r\n+          .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687625265074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       Alert(\r\n               context: context,\r\n               title: \"finished\",\r\n               desc:\r\n-                  \"the quize is finished\\nyour score $score/${quize.gitlingth()}\")\r\n+                  \"the quize is finished\\nyour score $result/${quize.gitlingth()}\")\r\n           .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n"
                },
                {
                    "date": 1687625278038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n       Alert(\r\n               context: context,\r\n               title: \"finished\",\r\n               desc:\r\n-                  \"the quize is finished\\nyour score $result/${quize.gitlingth()}\")\r\n+                  \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n           .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n"
                },
                {
                    "date": 1687625286054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       print('finished');\r\n       timer.cancel();\r\n       Alert(\r\n               context: context,\r\n-              title: \"finished\",\r\n+              title: \"Quiz Finishedfinished\",\r\n               desc:\r\n                   \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n           .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n"
                },
                {
                    "date": 1687625292092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       print('finished');\r\n       timer.cancel();\r\n       Alert(\r\n               context: context,\r\n-              title: \"Quiz Finishedfinished\",\r\n+              title: \"Quiz Finished\",\r\n               desc:\r\n                   \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n           .show();\r\n       Timer(const Duration(seconds: 0), () {\r\n"
                },
                {
                    "date": 1687625543743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n // ignore_for_file: avoid_print\r\n \r\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n-import 'package:rflutter_alert/rflutter_alert.dart';\r\n import '../constants.dart';\r\n import '../modules/true_false/quizBrain.dart';\r\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n@@ -45,14 +44,28 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-      Alert(\r\n-              context: context,\r\n-              title: \"Quiz Finished\",\r\n-              desc:\r\n-                  \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n-          .show();\r\n+     Alert(\r\n+                              context: context,\r\n+                              title: \"Quiz Finished\",\r\n+                              desc: \"your score $score/${quize.gitlingth()}\",\r\n+                              buttons: [\r\n+                                DialogButton(\r\n+                                    child: const Text(\r\n+                                      \"Close\",\r\n+                                    ),\r\n+                                    onPressed: () {\r\n+                                      Navigator.pushAndRemoveUntil(\r\n+                                        context,\r\n+                                        MaterialPageRoute(\r\n+                                          builder: (context) =>\r\n+                                              const HomePage(),\r\n+                                        ),\r\n+                                        (route) => false,\r\n+                                      );\r\n+                                    }),\r\n+                              ]).show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687625558624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,15 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-     Alert(\r\n+      // Alert(\r\n+      //         context: context,\r\n+      //         title: \"Quiz Finished\",\r\n+      //         desc:\r\n+      //             \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n+      //     .show();\r\n+      Alert(\r\n                               context: context,\r\n                               title: \"Quiz Finished\",\r\n                               desc: \"your score $score/${quize.gitlingth()}\",\r\n                               buttons: [\r\n"
                },
                {
                    "date": 1687625567353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,284 @@\n+// ignore_for_file: avoid_print\r\n+\r\n+import 'dart:async';\r\n+import 'package:flutter/material.dart';\r\n+import '../constants.dart';\r\n+import '../modules/true_false/quizBrain.dart';\r\n+import '../widgets/my_outline_btn.dart';\r\n+import 'home.dart';\r\n+\r\n+class TrueFalseQuiz extends StatefulWidget {\r\n+  const TrueFalseQuiz({super.key});\r\n+\r\n+  @override\r\n+  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n+}\r\n+\r\n+class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n+  QuizBrain quizBrain = QuizBrain();\r\n+  List<Icon> scoreKeeper = [];\r\n+  int result = 0;\r\n+  int counter = 10;\r\n+  late Timer timer;\r\n+\r\n+  void checkAnswer(bool? userChoice) {\r\n+    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n+    setState(() {\r\n+      if (correctAnswer == userChoice) {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.check,\r\n+            color: Colors.green,\r\n+          ),\r\n+        );\r\n+        result++;\r\n+      } else {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.close,\r\n+            color: Colors.red,\r\n+          ),\r\n+        );\r\n+      }\r\n+    });\r\n+\r\n+    if (quizBrain.isFinished()) {\r\n+      print('finished');\r\n+      timer.cancel();\r\n+      // Alert(\r\n+      //         context: context,\r\n+      //         title: \"Quiz Finished\",\r\n+      //         desc:\r\n+      //             \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n+      //     .show();\r\n+      Alert(\r\n+                              context: context,\r\n+                              title: \"Quiz Finished\",\r\n+                              desc: \"your score $result/${quize.gitlingth()}\",\r\n+                              buttons: [\r\n+                                DialogButton(\r\n+                                    child: const Text(\r\n+                                      \"Close\",\r\n+                                    ),\r\n+                                    onPressed: () {\r\n+                                      Navigator.pushAndRemoveUntil(\r\n+                                        context,\r\n+                                        MaterialPageRoute(\r\n+                                          builder: (context) =>\r\n+                                              const HomePage(),\r\n+                                        ),\r\n+                                        (route) => false,\r\n+                                      );\r\n+                                    }),\r\n+                              ]).show();\r\n+      Timer(const Duration(seconds: 0), () {\r\n+        showDialog(\r\n+          context: context,\r\n+          builder: (BuildContext context) {\r\n+            return AlertDialog(\r\n+              title: const Text('Quiz Finished'),\r\n+              content: Text(\r\n+                'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n+                style: const TextStyle(color: Colors.black),\r\n+              ),\r\n+              actions: [\r\n+                TextButton(\r\n+                  onPressed: () {\r\n+                    Navigator.pushAndRemoveUntil(\r\n+                      context,\r\n+                      MaterialPageRoute(\r\n+                        builder: (context) => const HomePage(),\r\n+                      ),\r\n+                      (route) => false,\r\n+                    );\r\n+                    setState(() {\r\n+                      quizBrain.reset();\r\n+                      scoreKeeper.clear();\r\n+                    });\r\n+                  },\r\n+                  child: const Text('Close'),\r\n+                ),\r\n+              ],\r\n+            );\r\n+          },\r\n+        );\r\n+        setState(() {\r\n+          quizBrain.reset();\r\n+          scoreKeeper.clear();\r\n+        });\r\n+      });\r\n+    } else {\r\n+      quizBrain.nextQuestion();\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    timer = Timer.periodic(const Duration(seconds: 1), (timer) {\r\n+      setState(() {\r\n+        counter--;\r\n+      });\r\n+      if (counter == 0) {\r\n+        // quizBrain.nextQuestion();\r\n+        checkAnswer(null);\r\n+        counter = 10;\r\n+      }\r\n+    });\r\n+    super.initState();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      body: Container(\r\n+        decoration: const BoxDecoration(\r\n+          gradient: LinearGradient(\r\n+            colors: [\r\n+              kBlueBg,\r\n+              kL2,\r\n+            ],\r\n+            begin: Alignment.topCenter,\r\n+            end: Alignment.bottomCenter,\r\n+          ),\r\n+        ),\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+            children: <Widget>[\r\n+              Row(\r\n+                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                children: [\r\n+                  SizedBox(\r\n+                    height: 44,\r\n+                    width: 44,\r\n+                    child: MYOutlineBtn(\r\n+                      icon: Icons.close,\r\n+                      iconColor: Colors.white,\r\n+                      bColor: Colors.white,\r\n+                      function: () {\r\n+                        Navigator.pushAndRemoveUntil(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (context) => const HomePage(),\r\n+                          ),\r\n+                          (route) => false,\r\n+                        );\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                  Stack(\r\n+                    alignment: Alignment.center,\r\n+                    children: [\r\n+                      SizedBox(\r\n+                        height: 56,\r\n+                        width: 56,\r\n+                        child: CircularProgressIndicator(\r\n+                          value: counter / 10,\r\n+                          color: Colors.white,\r\n+                          backgroundColor: Colors.white12,\r\n+                        ),\r\n+                      ),\r\n+                      Text(\r\n+                        counter.toString(),\r\n+                        style: const TextStyle(\r\n+                          fontFamily: 'Sf-Pro-Text',\r\n+                          fontSize: 24,\r\n+                          color: Colors.white,\r\n+                          fontWeight: FontWeight.bold,\r\n+                        ),\r\n+                      )\r\n+                    ],\r\n+                  ),\r\n+                  OutlinedButton(\r\n+                    onPressed: () {},\r\n+                    style: OutlinedButton.styleFrom(\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(25),\r\n+                        ),\r\n+                        side: const BorderSide(color: Colors.white)),\r\n+                    child: const Icon(\r\n+                      Icons.favorite,\r\n+                      color: Colors.white,\r\n+                    ),\r\n+                  )\r\n+                ],\r\n+              ),\r\n+              Expanded(\r\n+                flex: 5,\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(10.0),\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      quizBrain.getQuestionText(),\r\n+                      textAlign: TextAlign.center,\r\n+                      style: const TextStyle(\r\n+                        fontSize: 25.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle(\r\n+                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'True',\r\n+                      style: TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontSize: 20.0,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked true.\r\n+                      checkAnswer(true);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle().copyWith(\r\n+                      backgroundColor:\r\n+                          const MaterialStatePropertyAll(Colors.red),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'False',\r\n+                      style: TextStyle(\r\n+                        fontSize: 20.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked false.\r\n+                      checkAnswer(false);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Wrap(\r\n+                children: scoreKeeper,\r\n+              ),\r\n+              const SizedBox(\r\n+                height: 72,\r\n+              )\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1687625579564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n       //     .show();\r\n       Alert(\r\n                               context: context,\r\n                               title: \"Quiz Finished\",\r\n-                              desc: \"your score $result/${quize.gitlingth()}\",\r\n+                              desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n                               buttons: [\r\n                                 DialogButton(\r\n                                     child: const Text(\r\n                                       \"Close\",\r\n@@ -281,288 +281,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-// ignore_for_file: avoid_print\r\n-\r\n-import 'dart:async';\r\n-import 'package:flutter/material.dart';\r\n-import '../constants.dart';\r\n-import '../modules/true_false/quizBrain.dart';\r\n-import '../widgets/my_outline_btn.dart';\r\n-import 'home.dart';\r\n-\r\n-class TrueFalseQuiz extends StatefulWidget {\r\n-  const TrueFalseQuiz({super.key});\r\n-\r\n-  @override\r\n-  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n-}\r\n-\r\n-class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n-  QuizBrain quizBrain = QuizBrain();\r\n-  List<Icon> scoreKeeper = [];\r\n-  int result = 0;\r\n-  int counter = 10;\r\n-  late Timer timer;\r\n-\r\n-  void checkAnswer(bool? userChoice) {\r\n-    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-    setState(() {\r\n-      if (correctAnswer == userChoice) {\r\n-        scoreKeeper.add(\r\n-          const Icon(\r\n-            Icons.check,\r\n-            color: Colors.green,\r\n-          ),\r\n-        );\r\n-        result++;\r\n-      } else {\r\n-        scoreKeeper.add(\r\n-          const Icon(\r\n-            Icons.close,\r\n-            color: Colors.red,\r\n-          ),\r\n-        );\r\n-      }\r\n-    });\r\n-\r\n-    if (quizBrain.isFinished()) {\r\n-      print('finished');\r\n-      timer.cancel();\r\n-      // Alert(\r\n-      //         context: context,\r\n-      //         title: \"Quiz Finished\",\r\n-      //         desc:\r\n-      //             \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n-      //     .show();\r\n-      Alert(\r\n-                              context: context,\r\n-                              title: \"Quiz Finished\",\r\n-                              desc: \"your score $score/${quize.gitlingth()}\",\r\n-                              buttons: [\r\n-                                DialogButton(\r\n-                                    child: const Text(\r\n-                                      \"Close\",\r\n-                                    ),\r\n-                                    onPressed: () {\r\n-                                      Navigator.pushAndRemoveUntil(\r\n-                                        context,\r\n-                                        MaterialPageRoute(\r\n-                                          builder: (context) =>\r\n-                                              const HomePage(),\r\n-                                        ),\r\n-                                        (route) => false,\r\n-                                      );\r\n-                                    }),\r\n-                              ]).show();\r\n-      Timer(const Duration(seconds: 0), () {\r\n-        showDialog(\r\n-          context: context,\r\n-          builder: (BuildContext context) {\r\n-            return AlertDialog(\r\n-              title: const Text('Quiz Finished'),\r\n-              content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n-                style: const TextStyle(color: Colors.black),\r\n-              ),\r\n-              actions: [\r\n-                TextButton(\r\n-                  onPressed: () {\r\n-                    Navigator.pushAndRemoveUntil(\r\n-                      context,\r\n-                      MaterialPageRoute(\r\n-                        builder: (context) => const HomePage(),\r\n-                      ),\r\n-                      (route) => false,\r\n-                    );\r\n-                    setState(() {\r\n-                      quizBrain.reset();\r\n-                      scoreKeeper.clear();\r\n-                    });\r\n-                  },\r\n-                  child: const Text('Close'),\r\n-                ),\r\n-              ],\r\n-            );\r\n-          },\r\n-        );\r\n-        setState(() {\r\n-          quizBrain.reset();\r\n-          scoreKeeper.clear();\r\n-        });\r\n-      });\r\n-    } else {\r\n-      quizBrain.nextQuestion();\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    timer = Timer.periodic(const Duration(seconds: 1), (timer) {\r\n-      setState(() {\r\n-        counter--;\r\n-      });\r\n-      if (counter == 0) {\r\n-        // quizBrain.nextQuestion();\r\n-        checkAnswer(null);\r\n-        counter = 10;\r\n-      }\r\n-    });\r\n-    super.initState();\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      body: Container(\r\n-        decoration: const BoxDecoration(\r\n-          gradient: LinearGradient(\r\n-            colors: [\r\n-              kBlueBg,\r\n-              kL2,\r\n-            ],\r\n-            begin: Alignment.topCenter,\r\n-            end: Alignment.bottomCenter,\r\n-          ),\r\n-        ),\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n-          child: Column(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-            children: <Widget>[\r\n-              Row(\r\n-                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-                children: [\r\n-                  SizedBox(\r\n-                    height: 44,\r\n-                    width: 44,\r\n-                    child: MYOutlineBtn(\r\n-                      icon: Icons.close,\r\n-                      iconColor: Colors.white,\r\n-                      bColor: Colors.white,\r\n-                      function: () {\r\n-                        Navigator.pushAndRemoveUntil(\r\n-                          context,\r\n-                          MaterialPageRoute(\r\n-                            builder: (context) => const HomePage(),\r\n-                          ),\r\n-                          (route) => false,\r\n-                        );\r\n-                      },\r\n-                    ),\r\n-                  ),\r\n-                  Stack(\r\n-                    alignment: Alignment.center,\r\n-                    children: [\r\n-                      SizedBox(\r\n-                        height: 56,\r\n-                        width: 56,\r\n-                        child: CircularProgressIndicator(\r\n-                          value: counter / 10,\r\n-                          color: Colors.white,\r\n-                          backgroundColor: Colors.white12,\r\n-                        ),\r\n-                      ),\r\n-                      Text(\r\n-                        counter.toString(),\r\n-                        style: const TextStyle(\r\n-                          fontFamily: 'Sf-Pro-Text',\r\n-                          fontSize: 24,\r\n-                          color: Colors.white,\r\n-                          fontWeight: FontWeight.bold,\r\n-                        ),\r\n-                      )\r\n-                    ],\r\n-                  ),\r\n-                  OutlinedButton(\r\n-                    onPressed: () {},\r\n-                    style: OutlinedButton.styleFrom(\r\n-                        shape: RoundedRectangleBorder(\r\n-                          borderRadius: BorderRadius.circular(25),\r\n-                        ),\r\n-                        side: const BorderSide(color: Colors.white)),\r\n-                    child: const Icon(\r\n-                      Icons.favorite,\r\n-                      color: Colors.white,\r\n-                    ),\r\n-                  )\r\n-                ],\r\n-              ),\r\n-              Expanded(\r\n-                flex: 5,\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(10.0),\r\n-                  child: Center(\r\n-                    child: Text(\r\n-                      quizBrain.getQuestionText(),\r\n-                      textAlign: TextAlign.center,\r\n-                      style: const TextStyle(\r\n-                        fontSize: 25.0,\r\n-                        color: Colors.white,\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              Expanded(\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(15.0),\r\n-                  child: ElevatedButton(\r\n-                    style: const ButtonStyle(\r\n-                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n-                    ),\r\n-                    child: const Text(\r\n-                      'True',\r\n-                      style: TextStyle(\r\n-                        color: Colors.white,\r\n-                        fontSize: 20.0,\r\n-                      ),\r\n-                    ),\r\n-                    onPressed: () {\r\n-                      //The user picked true.\r\n-                      checkAnswer(true);\r\n-                    },\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              Expanded(\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(15.0),\r\n-                  child: ElevatedButton(\r\n-                    style: const ButtonStyle().copyWith(\r\n-                      backgroundColor:\r\n-                          const MaterialStatePropertyAll(Colors.red),\r\n-                    ),\r\n-                    child: const Text(\r\n-                      'False',\r\n-                      style: TextStyle(\r\n-                        fontSize: 20.0,\r\n-                        color: Colors.white,\r\n-                      ),\r\n-                    ),\r\n-                    onPressed: () {\r\n-                      //The user picked false.\r\n-                      checkAnswer(false);\r\n-                    },\r\n-                  ),\r\n-                ),\r\n-              ),\r\n-              Wrap(\r\n-                children: scoreKeeper,\r\n-              ),\r\n-              const SizedBox(\r\n-                height: 72,\r\n-              )\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1687625585413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // ignore_for_file: avoid_print\r\n \r\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n+import 'package:rflutter_alert/rflutter_alert.dart';\r\n import '../constants.dart';\r\n import '../modules/true_false/quizBrain.dart';\r\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n"
                },
                {
                    "date": 1687625609479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,8 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-      // Alert(\r\n-      //         context: context,\r\n-      //         title: \"Quiz Finished\",\r\n-      //         desc:\r\n-      //             \"the quize is finished\\nyour score $result/${quizBrain.questionBank.length}\")\r\n-      //     .show();\r\n       Alert(\r\n                               context: context,\r\n                               title: \"Quiz Finished\",\r\n                               desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n@@ -69,8 +63,12 @@\n                                               const HomePage(),\r\n                                         ),\r\n                                         (route) => false,\r\n                                       );\r\n+                                       setState(() {\r\n+                      quizBrain.reset();\r\n+                      scoreKeeper.clear();\r\n+                    });\r\n                                     }),\r\n                               ]).show();\r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n"
                },
                {
                    "date": 1687625634686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,32 +45,9 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-      Alert(\r\n-                              context: context,\r\n-                              title: \"Quiz Finished\",\r\n-                              desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n-                              buttons: [\r\n-                                DialogButton(\r\n-                                    child: const Text(\r\n-                                      \"Close\",\r\n-                                    ),\r\n-                                    onPressed: () {\r\n-                                      Navigator.pushAndRemoveUntil(\r\n-                                        context,\r\n-                                        MaterialPageRoute(\r\n-                                          builder: (context) =>\r\n-                                              const HomePage(),\r\n-                                        ),\r\n-                                        (route) => false,\r\n-                                      );\r\n-                                       setState(() {\r\n-                      quizBrain.reset();\r\n-                      scoreKeeper.clear();\r\n-                    });\r\n-                                    }),\r\n-                              ]).show();\r\n+      \r\n       Timer(const Duration(seconds: 0), () {\r\n         showDialog(\r\n           context: context,\r\n           builder: (BuildContext context) {\r\n"
                },
                {
                    "date": 1687625651968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,38 +47,38 @@\n       print('finished');\r\n       timer.cancel();\r\n       \r\n       Timer(const Duration(seconds: 0), () {\r\n-        showDialog(\r\n-          context: context,\r\n-          builder: (BuildContext context) {\r\n-            return AlertDialog(\r\n-              title: const Text('Quiz Finished'),\r\n-              content: Text(\r\n-                'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n-                style: const TextStyle(color: Colors.black),\r\n-              ),\r\n-              actions: [\r\n-                TextButton(\r\n-                  onPressed: () {\r\n-                    Navigator.pushAndRemoveUntil(\r\n-                      context,\r\n-                      MaterialPageRoute(\r\n-                        builder: (context) => const HomePage(),\r\n-                      ),\r\n-                      (route) => false,\r\n-                    );\r\n-                    setState(() {\r\n-                      quizBrain.reset();\r\n-                      scoreKeeper.clear();\r\n-                    });\r\n-                  },\r\n-                  child: const Text('Close'),\r\n-                ),\r\n-              ],\r\n-            );\r\n-          },\r\n-        );\r\n+        // showDialog(\r\n+        //   context: context,\r\n+        //   builder: (BuildContext context) {\r\n+        //     return AlertDialog(\r\n+        //       title: const Text('Quiz Finished'),\r\n+        //       content: Text(\r\n+        //         'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n+        //         style: const TextStyle(color: Colors.black),\r\n+        //       ),\r\n+        //       actions: [\r\n+        //         TextButton(\r\n+        //           onPressed: () {\r\n+        //             Navigator.pushAndRemoveUntil(\r\n+        //               context,\r\n+        //               MaterialPageRoute(\r\n+        //                 builder: (context) => const HomePage(),\r\n+        //               ),\r\n+        //               (route) => false,\r\n+        //             );\r\n+        //             setState(() {\r\n+        //               quizBrain.reset();\r\n+        //               scoreKeeper.clear();\r\n+        //             });\r\n+        //           },\r\n+        //           child: const Text('Close'),\r\n+        //         ),\r\n+        //       ],\r\n+        //     );\r\n+        //   },\r\n+        // );\r\n         setState(() {\r\n           quizBrain.reset();\r\n           scoreKeeper.clear();\r\n         });\r\n"
                },
                {
                    "date": 1687625800339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,40 +45,34 @@\n \r\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n-      \r\n+\r\n       Timer(const Duration(seconds: 0), () {\r\n-        // showDialog(\r\n-        //   context: context,\r\n-        //   builder: (BuildContext context) {\r\n-        //     return AlertDialog(\r\n-        //       title: const Text('Quiz Finished'),\r\n-        //       content: Text(\r\n-        //         'Congratulations! You have completed the quiz.\\nresult: $result / ${quizBrain.questionBank.length} ',\r\n-        //         style: const TextStyle(color: Colors.black),\r\n-        //       ),\r\n-        //       actions: [\r\n-        //         TextButton(\r\n-        //           onPressed: () {\r\n-        //             Navigator.pushAndRemoveUntil(\r\n-        //               context,\r\n-        //               MaterialPageRoute(\r\n-        //                 builder: (context) => const HomePage(),\r\n-        //               ),\r\n-        //               (route) => false,\r\n-        //             );\r\n-        //             setState(() {\r\n-        //               quizBrain.reset();\r\n-        //               scoreKeeper.clear();\r\n-        //             });\r\n-        //           },\r\n-        //           child: const Text('Close'),\r\n-        //         ),\r\n-        //       ],\r\n-        //     );\r\n-        //   },\r\n-        // );\r\n+        Alert(\r\n+            context: context,\r\n+            title: \"Quiz Finished\",\r\n+            desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n+            buttons: [\r\n+              DialogButton(\r\n+                  child: const Text(\r\n+                    \"Close\",\r\n+                  ),\r\n+                  onPressed: () {\r\n+                    Navigator.pushAndRemoveUntil(\r\n+                      context,\r\n+                      MaterialPageRoute(\r\n+                        builder: (context) => const HomePage(),\r\n+                      ),\r\n+                      (route) => false,\r\n+                    );\r\n+                    setState(() {\r\n+                      quizBrain.reset();\r\n+                      scoreKeeper.clear();\r\n+                    });\r\n+                  }),\r\n+            ]).show();\r\n+\r\n         setState(() {\r\n           quizBrain.reset();\r\n           scoreKeeper.clear();\r\n         });\r\n"
                },
                {
                    "date": 1687625819932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,16 @@\n                       scoreKeeper.clear();\r\n                     });\r\n                   }),\r\n             ]).show();\r\n-\r\n         setState(() {\r\n           quizBrain.reset();\r\n           scoreKeeper.clear();\r\n         });\r\n       });\r\n     } else {\r\n       quizBrain.nextQuestion();\r\n+      counter = 10;\r\n     }\r\n   }\r\n \r\n   @override\r\n"
                },
                {
                    "date": 1687625896853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     if (quizBrain.isFinished()) {\r\n       print('finished');\r\n       timer.cancel();\r\n \r\n-      Timer(const Duration(seconds: 0), () {\r\n+      Timer(const Duration(seconds: 1), () {\r\n         Alert(\r\n             context: context,\r\n             title: \"Quiz Finished\",\r\n             desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n"
                },
                {
                    "date": 1687625965526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,12 @@\n                       scoreKeeper.clear();\r\n                     });\r\n                   }),\r\n             ]).show();\r\n-        setState(() {\r\n-          quizBrain.reset();\r\n-          scoreKeeper.clear();\r\n-        });\r\n+        // setState(() {\r\n+        //   quizBrain.reset();\r\n+        //   scoreKeeper.clear();\r\n+        // });\r\n       });\r\n     } else {\r\n       quizBrain.nextQuestion();\r\n       counter = 10;\r\n"
                },
                {
                    "date": 1687626029868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,12 @@\n                       scoreKeeper.clear();\r\n                     });\r\n                   }),\r\n             ]).show();\r\n-        // setState(() {\r\n-        //   quizBrain.reset();\r\n-        //   scoreKeeper.clear();\r\n-        // });\r\n+        setState(() {\r\n+          quizBrain.reset();\r\n+          scoreKeeper.clear();\r\n+        });\r\n       });\r\n     } else {\r\n       quizBrain.nextQuestion();\r\n       counter = 10;\r\n"
                },
                {
                    "date": 1687627625720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class TrueFalseQuiz extends StatefulWidget {\r\n   const TrueFalseQuiz({super.key});\r\n \r\n   @override\r\n-  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n+  TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n }\r\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n"
                },
                {
                    "date": 1687627640384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class TrueFalseQuiz extends StatefulWidget {\r\n   const TrueFalseQuiz({super.key});\r\n \r\n   @override\r\n-  TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n+  _TrueFalseQuizState createState() => TrueFalseQuizState();\r\n }\r\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n"
                },
                {
                    "date": 1687627647459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// ignore_for_file: avoid_print\r\n+// ignore_for_file: avoid_print, library_private_types_in_public_api\r\n \r\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n import 'package:rflutter_alert/rflutter_alert.dart';\r\n@@ -11,9 +11,9 @@\n class TrueFalseQuiz extends StatefulWidget {\r\n   const TrueFalseQuiz({super.key});\r\n \r\n   @override\r\n-  _TrueFalseQuizState createState() => TrueFalseQuizState();\r\n+  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n }\r\n \r\n class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n   QuizBrain quizBrain = QuizBrain();\r\n"
                },
                {
                    "date": 1687638913277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import 'dart:async';\r\n import 'package:flutter/material.dart';\r\n import 'package:rflutter_alert/rflutter_alert.dart';\r\n import '../constants.dart';\r\n-import '../modules/true_false/quizBrain.dart';\r\n+import '../modules/true_false/true_false_brain.dart';\r\n import '../widgets/my_outline_btn.dart';\r\n import 'home.dart';\r\n \r\n class TrueFalseQuiz extends StatefulWidget {\r\n"
                }
            ],
            "date": 1687439050010,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\n\r\nimport 'package:flutter/material.dart';\r\n\r\nimport '../constants.dart';\r\nimport '../modules/true_false/quizBrain.dart';\r\nimport '../widgets/my_outline_btn.dart';\r\nimport 'home.dart';\r\n\r\nclass TrueFalseQuiz extends StatefulWidget {\r\n  @override\r\n  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n}\r\n\r\nclass _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n  QuizBrain quizBrain = QuizBrain();\r\n\r\n  List<Icon> scoreKeeper = [];\r\n\r\n  int? _choice;\r\n\r\n  int counter = 10;\r\n\r\n  void checkAnswer(bool userChoice) {\r\n    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n    setState(() {\r\n      if (correctAnswer == userChoice) {\r\n        scoreKeeper.add(\r\n          Icon(\r\n            Icons.check,\r\n            color: Colors.green,\r\n          ),\r\n        );\r\n      } else {\r\n        scoreKeeper.add(\r\n          Icon(\r\n            Icons.close,\r\n            color: Colors.red,\r\n          ),\r\n        );\r\n      }\r\n    });\r\n\r\n    if (quizBrain.isFinished()) {\r\n      print('finished');\r\n\r\n      Timer(Duration(seconds: 1), () {\r\n        // Alert(context: context, title: \"Finished\", desc: \"you are done\").show();\r\n        setState(() {\r\n          quizBrain.reset();\r\n          scoreKeeper.clear();\r\n        });\r\n      });\r\n    } else {\r\n      quizBrain.nextQuestion();\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    Timer.periodic(Duration(seconds: 1), (timer) {\r\n      setState(() {\r\n        counter--;\r\n      });\r\n      if (counter == 0) {\r\n        // timer.cancel();\r\n        counter = 10;\r\n        quizBrain.nextQuestion();\r\n      }\r\n      ;\r\n    });\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        decoration: BoxDecoration(\r\n          gradient: LinearGradient(\r\n            colors: [\r\n              kBlueBg,\r\n              kL2,\r\n            ],\r\n            begin: Alignment.topCenter,\r\n            end: Alignment.bottomCenter,\r\n          ),\r\n        ),\r\n        child: Padding(\r\n          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n            children: <Widget>[\r\n              Row(\r\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                children: [\r\n                  SizedBox(\r\n                    height: 44,\r\n                    width: 44,\r\n                    child: MYOutlineBtn(\r\n                      icon: Icons.close,\r\n                      iconColor: Colors.white,\r\n                      bColor: Colors.white,\r\n                      function: () {\r\n                        // Navigator.pop(context);\r\n                        // Navigator.pop(context);\r\n\r\n                        Navigator.pushAndRemoveUntil(\r\n                          context,\r\n                          MaterialPageRoute(\r\n                            builder: (context) => HomePage(),\r\n                          ),\r\n                          (route) => false,\r\n                        );\r\n                      },\r\n                    ),\r\n                  ),\r\n                  Stack(\r\n                    alignment: Alignment.center,\r\n                    children: [\r\n                      SizedBox(\r\n                        height: 56,\r\n                        width: 56,\r\n                        child: CircularProgressIndicator(\r\n                          value: counter / 10,\r\n                          color: Colors.white,\r\n                          backgroundColor: Colors.white12,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        counter.toString(),\r\n                        style: TextStyle(\r\n                          fontFamily: 'Sf-Pro-Text',\r\n                          fontSize: 24,\r\n                          color: Colors.white,\r\n                          fontWeight: FontWeight.bold,\r\n                        ),\r\n                      )\r\n                    ],\r\n                  ),\r\n                  OutlinedButton(\r\n                    onPressed: () {},\r\n                    child: Icon(\r\n                      Icons.favorite,\r\n                      color: Colors.white,\r\n                    ),\r\n                    style: OutlinedButton.styleFrom(\r\n                        shape: RoundedRectangleBorder(\r\n                          borderRadius: BorderRadius.circular(25),\r\n                        ),\r\n                        side: BorderSide(color: Colors.white)),\r\n                  )\r\n                ],\r\n              ),\r\n              Expanded(\r\n                flex: 5,\r\n                child: Padding(\r\n                  padding: EdgeInsets.all(10.0),\r\n                  child: Center(\r\n                    child: Text(\r\n                      quizBrain.getQuestionText(),\r\n                      textAlign: TextAlign.center,\r\n                      style: TextStyle(\r\n                        fontSize: 25.0,\r\n                        color: Colors.white,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              Expanded(\r\n                child: Padding(\r\n                  padding: EdgeInsets.all(15.0),\r\n                  child: ElevatedButton(\r\n                    style: ButtonStyle(\r\n                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n                    ),\r\n                    child: Text(\r\n                      'True',\r\n                      style: TextStyle(\r\n                        color: Colors.white,\r\n                        fontSize: 20.0,\r\n                      ),\r\n                    ),\r\n                    onPressed: () {\r\n                      //The user picked true.\r\n                      checkAnswer(true);\r\n                    },\r\n                  ),\r\n                ),\r\n              ),\r\n              Expanded(\r\n                child: Padding(\r\n                  padding: EdgeInsets.all(15.0),\r\n                  child: ElevatedButton(\r\n                    style: ButtonStyle().copyWith(\r\n                      backgroundColor: MaterialStatePropertyAll(Colors.red),\r\n                    ),\r\n                    child: Text(\r\n                      'False',\r\n                      style: TextStyle(\r\n                        fontSize: 20.0,\r\n                        color: Colors.white,\r\n                      ),\r\n                    ),\r\n                    onPressed: () {\r\n                      //The user picked false.\r\n                      checkAnswer(false);\r\n                    },\r\n                  ),\r\n                ),\r\n              ),\r\n              Wrap(\r\n                children: scoreKeeper,\r\n              ),\r\n              SizedBox(\r\n                height: 72,\r\n              )\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}