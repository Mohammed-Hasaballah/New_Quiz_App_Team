{
    "sourceFile": "lib/pages/true_false_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1687685655284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1687685667516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-    \r\n+    int questionCount = \r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n"
                },
                {
                    "date": 1687685673290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-    int questionCount = \r\n+    int questionCount = quizBrain.getLength;\r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n"
                },
                {
                    "date": 1687685681008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-    int questionCount = quizBrain.getLength;\r\n+   \r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n"
                },
                {
                    "date": 1687685705227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n+     int questionCount = quizBrain.getLength();\r\n     return Scaffold(\r\n       body: Container(\r\n         decoration: const BoxDecoration(\r\n           gradient: LinearGradient(\r\n"
                },
                {
                    "date": 1687685783009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,9 @@\n     return Scaffold(\r\n       body: Container(\r\n         decoration: const BoxDecoration(\r\n           gradient: LinearGradient(\r\n-            colors: [\r\n-              kBlueBg,\r\n-              kL2,\r\n-            ],\r\n+            colors: [kL2, kL22],\r\n             begin: Alignment.topCenter,\r\n             end: Alignment.bottomCenter,\r\n           ),\r\n         ),\r\n"
                },
                {
                    "date": 1687685820122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n     return Scaffold(\r\n       body: Container(\r\n         decoration: const BoxDecoration(\r\n           gradient: LinearGradient(\r\n-            colors: [kL2, kL22],\r\n+            colors: [kL1, kL12],\r\n             begin: Alignment.topCenter,\r\n             end: Alignment.bottomCenter,\r\n           ),\r\n         ),\r\n"
                },
                {
                    "date": 1687685876552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   late Timer timer;\r\n \r\n   void checkAnswer(bool? userChoice) {\r\n     bool correctAnswer = quizBrain.getQuestionAnswer();\r\n-   \r\n+\r\n     setState(() {\r\n       if (correctAnswer == userChoice) {\r\n         scoreKeeper.add(\r\n           const Icon(\r\n@@ -104,9 +104,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-     int questionCount = quizBrain.getLength();\r\n+    int questionCount = quizBrain.getLength();\r\n     return Scaffold(\r\n       body: Container(\r\n         decoration: const BoxDecoration(\r\n           gradient: LinearGradient(\r\n@@ -179,9 +179,9 @@\n                   )\r\n                 ],\r\n               ),\r\n               Expanded(\r\n-                flex: 5,\r\n+            \r\n                 child: Padding(\r\n                   padding: const EdgeInsets.all(10.0),\r\n                   child: Center(\r\n                     child: Text(\r\n"
                },
                {
                    "date": 1687685883633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,8 +179,20 @@\n                   )\r\n                 ],\r\n               ),\r\n               Expanded(\r\n+                child: Center(\r\n+                  child: SizedBox(\r\n+                    height: 500,\r\n+                    width: 500,\r\n+                    child: Image.asset(\r\n+                      'assets/images/bg.png',\r\n+                      fit: BoxFit.contain,\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n             \r\n                 child: Padding(\r\n                   padding: const EdgeInsets.all(10.0),\r\n                   child: Center(\r\n"
                },
                {
                    "date": 1687685895372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n                     ),\r\n                   )\r\n                 ],\r\n               ),\r\n-              SizedBox()\r\n+              SizedBox(h)\r\n               Expanded(\r\n                 child: Center(\r\n                   child: SizedBox(\r\n                     height: 500,\r\n"
                },
                {
                    "date": 1687685911868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,267 @@\n+// ignore_for_file: avoid_print, library_private_types_in_public_api\r\n+\r\n+import 'dart:async';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:rflutter_alert/rflutter_alert.dart';\r\n+import '../constants.dart';\r\n+import '../modules/true_false/true_false_brain.dart';\r\n+import '../widgets/my_outline_btn.dart';\r\n+import 'home.dart';\r\n+\r\n+class TrueFalseQuiz extends StatefulWidget {\r\n+  const TrueFalseQuiz({super.key});\r\n+\r\n+  @override\r\n+  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n+}\r\n+\r\n+class _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n+  QuizBrain quizBrain = QuizBrain();\r\n+  List<Icon> scoreKeeper = [];\r\n+  int result = 0;\r\n+  int counter = 10;\r\n+  late Timer timer;\r\n+\r\n+  void checkAnswer(bool? userChoice) {\r\n+    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n+\r\n+    setState(() {\r\n+      if (correctAnswer == userChoice) {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.check,\r\n+            color: Colors.green,\r\n+          ),\r\n+        );\r\n+        result++;\r\n+      } else {\r\n+        scoreKeeper.add(\r\n+          const Icon(\r\n+            Icons.close,\r\n+            color: Colors.red,\r\n+          ),\r\n+        );\r\n+      }\r\n+    });\r\n+\r\n+    if (quizBrain.isFinished()) {\r\n+      print('finished');\r\n+      timer.cancel();\r\n+\r\n+      Timer(const Duration(seconds: 1), () {\r\n+        Alert(\r\n+            context: context,\r\n+            title: \"Quiz Finished\",\r\n+            desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n+            buttons: [\r\n+              DialogButton(\r\n+                  child: const Text(\r\n+                    \"Close\",\r\n+                  ),\r\n+                  onPressed: () {\r\n+                    Navigator.pushAndRemoveUntil(\r\n+                      context,\r\n+                      MaterialPageRoute(\r\n+                        builder: (context) => const HomePage(),\r\n+                      ),\r\n+                      (route) => false,\r\n+                    );\r\n+                    setState(() {\r\n+                      quizBrain.reset();\r\n+                      scoreKeeper.clear();\r\n+                    });\r\n+                  }),\r\n+            ]).show();\r\n+        setState(() {\r\n+          quizBrain.reset();\r\n+          scoreKeeper.clear();\r\n+        });\r\n+      });\r\n+    } else {\r\n+      quizBrain.nextQuestion();\r\n+      counter = 10;\r\n+    }\r\n+  }\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    timer = Timer.periodic(const Duration(seconds: 1), (timer) {\r\n+      setState(() {\r\n+        counter--;\r\n+      });\r\n+      if (counter == 0) {\r\n+        // quizBrain.nextQuestion();\r\n+        checkAnswer(null);\r\n+        counter = 10;\r\n+      }\r\n+    });\r\n+    super.initState();\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    int questionCount = quizBrain.getLength();\r\n+    return Scaffold(\r\n+      body: Container(\r\n+        decoration: const BoxDecoration(\r\n+          gradient: LinearGradient(\r\n+            colors: [kL1, kL12],\r\n+            begin: Alignment.topCenter,\r\n+            end: Alignment.bottomCenter,\r\n+          ),\r\n+        ),\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n+          child: Column(\r\n+            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+            children: <Widget>[\r\n+              Row(\r\n+                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+                children: [\r\n+                  SizedBox(\r\n+                    height: 44,\r\n+                    width: 44,\r\n+                    child: MYOutlineBtn(\r\n+                      icon: Icons.close,\r\n+                      iconColor: Colors.white,\r\n+                      bColor: Colors.white,\r\n+                      function: () {\r\n+                        Navigator.pushAndRemoveUntil(\r\n+                          context,\r\n+                          MaterialPageRoute(\r\n+                            builder: (context) => const HomePage(),\r\n+                          ),\r\n+                          (route) => false,\r\n+                        );\r\n+                      },\r\n+                    ),\r\n+                  ),\r\n+                  Stack(\r\n+                    alignment: Alignment.center,\r\n+                    children: [\r\n+                      SizedBox(\r\n+                        height: 56,\r\n+                        width: 56,\r\n+                        child: CircularProgressIndicator(\r\n+                          value: counter / 10,\r\n+                          color: Colors.white,\r\n+                          backgroundColor: Colors.white12,\r\n+                        ),\r\n+                      ),\r\n+                      Text(\r\n+                        counter.toString(),\r\n+                        style: const TextStyle(\r\n+                          fontFamily: 'Sf-Pro-Text',\r\n+                          fontSize: 24,\r\n+                          color: Colors.white,\r\n+                          fontWeight: FontWeight.bold,\r\n+                        ),\r\n+                      )\r\n+                    ],\r\n+                  ),\r\n+                  OutlinedButton(\r\n+                    onPressed: () {},\r\n+                    style: OutlinedButton.styleFrom(\r\n+                        shape: RoundedRectangleBorder(\r\n+                          borderRadius: BorderRadius.circular(25),\r\n+                        ),\r\n+                        side: const BorderSide(color: Colors.white)),\r\n+                    child: const Icon(\r\n+                      Icons.favorite,\r\n+                      color: Colors.white,\r\n+                    ),\r\n+                  )\r\n+                ],\r\n+              ),\r\n+              const SizedBox(\r\n+                height: 24,\r\n+              ),\r\n+              Expanded(\r\n+                child: Center(\r\n+                  child: SizedBox(\r\n+                    height: 500,\r\n+                    width: 500,\r\n+                    child: Image.asset(\r\n+                      'assets/images/bags.png',\r\n+                      fit: BoxFit.contain,\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(10.0),\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      quizBrain.getQuestionText(),\r\n+                      textAlign: TextAlign.center,\r\n+                      style: const TextStyle(\r\n+                        fontSize: 25.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle(\r\n+                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'True',\r\n+                      style: TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontSize: 20.0,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked true.\r\n+                      checkAnswer(true);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Expanded(\r\n+                child: Padding(\r\n+                  padding: const EdgeInsets.all(15.0),\r\n+                  child: ElevatedButton(\r\n+                    style: const ButtonStyle().copyWith(\r\n+                      backgroundColor:\r\n+                          const MaterialStatePropertyAll(Colors.red),\r\n+                    ),\r\n+                    child: const Text(\r\n+                      'False',\r\n+                      style: TextStyle(\r\n+                        fontSize: 20.0,\r\n+                        color: Colors.white,\r\n+                      ),\r\n+                    ),\r\n+                    onPressed: () {\r\n+                      //The user picked false.\r\n+                      checkAnswer(false);\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+              ),\r\n+              Wrap(\r\n+                children: scoreKeeper,\r\n+              ),\r\n+              const SizedBox(\r\n+                height: 72,\r\n+              )\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1687685655284,
            "name": "Commit-0",
            "content": "// ignore_for_file: avoid_print, library_private_types_in_public_api\r\n\r\nimport 'dart:async';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:rflutter_alert/rflutter_alert.dart';\r\nimport '../constants.dart';\r\nimport '../modules/true_false/true_false_brain.dart';\r\nimport '../widgets/my_outline_btn.dart';\r\nimport 'home.dart';\r\n\r\nclass TrueFalseQuiz extends StatefulWidget {\r\n  const TrueFalseQuiz({super.key});\r\n\r\n  @override\r\n  _TrueFalseQuizState createState() => _TrueFalseQuizState();\r\n}\r\n\r\nclass _TrueFalseQuizState extends State<TrueFalseQuiz> {\r\n  QuizBrain quizBrain = QuizBrain();\r\n  List<Icon> scoreKeeper = [];\r\n  int result = 0;\r\n  int counter = 10;\r\n  late Timer timer;\r\n\r\n  void checkAnswer(bool? userChoice) {\r\n    bool correctAnswer = quizBrain.getQuestionAnswer();\r\n    \r\n    setState(() {\r\n      if (correctAnswer == userChoice) {\r\n        scoreKeeper.add(\r\n          const Icon(\r\n            Icons.check,\r\n            color: Colors.green,\r\n          ),\r\n        );\r\n        result++;\r\n      } else {\r\n        scoreKeeper.add(\r\n          const Icon(\r\n            Icons.close,\r\n            color: Colors.red,\r\n          ),\r\n        );\r\n      }\r\n    });\r\n\r\n    if (quizBrain.isFinished()) {\r\n      print('finished');\r\n      timer.cancel();\r\n\r\n      Timer(const Duration(seconds: 1), () {\r\n        Alert(\r\n            context: context,\r\n            title: \"Quiz Finished\",\r\n            desc: \"your score $result/${quizBrain.questionBank.length}\",\r\n            buttons: [\r\n              DialogButton(\r\n                  child: const Text(\r\n                    \"Close\",\r\n                  ),\r\n                  onPressed: () {\r\n                    Navigator.pushAndRemoveUntil(\r\n                      context,\r\n                      MaterialPageRoute(\r\n                        builder: (context) => const HomePage(),\r\n                      ),\r\n                      (route) => false,\r\n                    );\r\n                    setState(() {\r\n                      quizBrain.reset();\r\n                      scoreKeeper.clear();\r\n                    });\r\n                  }),\r\n            ]).show();\r\n        setState(() {\r\n          quizBrain.reset();\r\n          scoreKeeper.clear();\r\n        });\r\n      });\r\n    } else {\r\n      quizBrain.nextQuestion();\r\n      counter = 10;\r\n    }\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    timer = Timer.periodic(const Duration(seconds: 1), (timer) {\r\n      setState(() {\r\n        counter--;\r\n      });\r\n      if (counter == 0) {\r\n        // quizBrain.nextQuestion();\r\n        checkAnswer(null);\r\n        counter = 10;\r\n      }\r\n    });\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        decoration: const BoxDecoration(\r\n          gradient: LinearGradient(\r\n            colors: [\r\n              kBlueBg,\r\n              kL2,\r\n            ],\r\n            begin: Alignment.topCenter,\r\n            end: Alignment.bottomCenter,\r\n          ),\r\n        ),\r\n        child: Padding(\r\n          padding: const EdgeInsets.only(top: 74, left: 24, right: 24),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n            children: <Widget>[\r\n              Row(\r\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n                children: [\r\n                  SizedBox(\r\n                    height: 44,\r\n                    width: 44,\r\n                    child: MYOutlineBtn(\r\n                      icon: Icons.close,\r\n                      iconColor: Colors.white,\r\n                      bColor: Colors.white,\r\n                      function: () {\r\n                        Navigator.pushAndRemoveUntil(\r\n                          context,\r\n                          MaterialPageRoute(\r\n                            builder: (context) => const HomePage(),\r\n                          ),\r\n                          (route) => false,\r\n                        );\r\n                      },\r\n                    ),\r\n                  ),\r\n                  Stack(\r\n                    alignment: Alignment.center,\r\n                    children: [\r\n                      SizedBox(\r\n                        height: 56,\r\n                        width: 56,\r\n                        child: CircularProgressIndicator(\r\n                          value: counter / 10,\r\n                          color: Colors.white,\r\n                          backgroundColor: Colors.white12,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        counter.toString(),\r\n                        style: const TextStyle(\r\n                          fontFamily: 'Sf-Pro-Text',\r\n                          fontSize: 24,\r\n                          color: Colors.white,\r\n                          fontWeight: FontWeight.bold,\r\n                        ),\r\n                      )\r\n                    ],\r\n                  ),\r\n                  OutlinedButton(\r\n                    onPressed: () {},\r\n                    style: OutlinedButton.styleFrom(\r\n                        shape: RoundedRectangleBorder(\r\n                          borderRadius: BorderRadius.circular(25),\r\n                        ),\r\n                        side: const BorderSide(color: Colors.white)),\r\n                    child: const Icon(\r\n                      Icons.favorite,\r\n                      color: Colors.white,\r\n                    ),\r\n                  )\r\n                ],\r\n              ),\r\n              Expanded(\r\n                flex: 5,\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(10.0),\r\n                  child: Center(\r\n                    child: Text(\r\n                      quizBrain.getQuestionText(),\r\n                      textAlign: TextAlign.center,\r\n                      style: const TextStyle(\r\n                        fontSize: 25.0,\r\n                        color: Colors.white,\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              Expanded(\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(15.0),\r\n                  child: ElevatedButton(\r\n                    style: const ButtonStyle(\r\n                      backgroundColor: MaterialStatePropertyAll(Colors.green),\r\n                    ),\r\n                    child: const Text(\r\n                      'True',\r\n                      style: TextStyle(\r\n                        color: Colors.white,\r\n                        fontSize: 20.0,\r\n                      ),\r\n                    ),\r\n                    onPressed: () {\r\n                      //The user picked true.\r\n                      checkAnswer(true);\r\n                    },\r\n                  ),\r\n                ),\r\n              ),\r\n              Expanded(\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(15.0),\r\n                  child: ElevatedButton(\r\n                    style: const ButtonStyle().copyWith(\r\n                      backgroundColor:\r\n                          const MaterialStatePropertyAll(Colors.red),\r\n                    ),\r\n                    child: const Text(\r\n                      'False',\r\n                      style: TextStyle(\r\n                        fontSize: 20.0,\r\n                        color: Colors.white,\r\n                      ),\r\n                    ),\r\n                    onPressed: () {\r\n                      //The user picked false.\r\n                      checkAnswer(false);\r\n                    },\r\n                  ),\r\n                ),\r\n              ),\r\n              Wrap(\r\n                children: scoreKeeper,\r\n              ),\r\n              const SizedBox(\r\n                height: 72,\r\n              )\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}